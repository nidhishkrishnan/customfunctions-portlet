/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.colors.themes.model.impl;

import com.colors.themes.model.Colors;
import com.colors.themes.model.ColorsModel;
import com.colors.themes.model.ColorsSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Colors service. Represents a row in the &quot;theme_Colors&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.colors.themes.model.ColorsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ColorsImpl}.
 * </p>
 *
 * @author user
 * @see ColorsImpl
 * @see com.colors.themes.model.Colors
 * @see com.colors.themes.model.ColorsModel
 * @generated
 */
@JSON(strict = true)
public class ColorsModelImpl extends BaseModelImpl<Colors>
	implements ColorsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a colors model instance should use the {@link com.colors.themes.model.Colors} interface instead.
	 */
	public static final String TABLE_NAME = "theme_Colors";
	public static final Object[][] TABLE_COLUMNS = {
			{ "colorId", Types.BIGINT },
			{ "colorName", Types.VARCHAR },
			{ "status", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table theme_Colors (colorId LONG not null primary key,colorName VARCHAR(75) null,status BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table theme_Colors";
	public static final String ORDER_BY_JPQL = " ORDER BY colors.colorId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY theme_Colors.colorId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.colors.themes.model.Colors"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.colors.themes.model.Colors"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.colors.themes.model.Colors"),
			true);
	public static long COLORID_COLUMN_BITMASK = 1L;
	public static long COLORNAME_COLUMN_BITMASK = 2L;
	public static long STATUS_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Colors toModel(ColorsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Colors model = new ColorsImpl();

		model.setColorId(soapModel.getColorId());
		model.setColorName(soapModel.getColorName());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Colors> toModels(ColorsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Colors> models = new ArrayList<Colors>(soapModels.length);

		for (ColorsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.colors.themes.model.Colors"));

	public ColorsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _colorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setColorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _colorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Colors.class;
	}

	@Override
	public String getModelClassName() {
		return Colors.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("colorId", getColorId());
		attributes.put("colorName", getColorName());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long colorId = (Long)attributes.get("colorId");

		if (colorId != null) {
			setColorId(colorId);
		}

		String colorName = (String)attributes.get("colorName");

		if (colorName != null) {
			setColorName(colorName);
		}

		Boolean status = (Boolean)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getColorId() {
		return _colorId;
	}

	@Override
	public void setColorId(long colorId) {
		_columnBitmask |= COLORID_COLUMN_BITMASK;

		if (!_setOriginalColorId) {
			_setOriginalColorId = true;

			_originalColorId = _colorId;
		}

		_colorId = colorId;
	}

	public long getOriginalColorId() {
		return _originalColorId;
	}

	@JSON
	@Override
	public String getColorName() {
		if (_colorName == null) {
			return StringPool.BLANK;
		}
		else {
			return _colorName;
		}
	}

	@Override
	public void setColorName(String colorName) {
		_columnBitmask |= COLORNAME_COLUMN_BITMASK;

		if (_originalColorName == null) {
			_originalColorName = _colorName;
		}

		_colorName = colorName;
	}

	public String getOriginalColorName() {
		return GetterUtil.getString(_originalColorName);
	}

	@JSON
	@Override
	public boolean getStatus() {
		return _status;
	}

	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public boolean getOriginalStatus() {
		return _originalStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Colors.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Colors toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Colors)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ColorsImpl colorsImpl = new ColorsImpl();

		colorsImpl.setColorId(getColorId());
		colorsImpl.setColorName(getColorName());
		colorsImpl.setStatus(getStatus());

		colorsImpl.resetOriginalValues();

		return colorsImpl;
	}

	@Override
	public int compareTo(Colors colors) {
		long primaryKey = colors.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Colors)) {
			return false;
		}

		Colors colors = (Colors)obj;

		long primaryKey = colors.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ColorsModelImpl colorsModelImpl = this;

		colorsModelImpl._originalColorId = colorsModelImpl._colorId;

		colorsModelImpl._setOriginalColorId = false;

		colorsModelImpl._originalColorName = colorsModelImpl._colorName;

		colorsModelImpl._originalStatus = colorsModelImpl._status;

		colorsModelImpl._setOriginalStatus = false;

		colorsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Colors> toCacheModel() {
		ColorsCacheModel colorsCacheModel = new ColorsCacheModel();

		colorsCacheModel.colorId = getColorId();

		colorsCacheModel.colorName = getColorName();

		String colorName = colorsCacheModel.colorName;

		if ((colorName != null) && (colorName.length() == 0)) {
			colorsCacheModel.colorName = null;
		}

		colorsCacheModel.status = getStatus();

		return colorsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{colorId=");
		sb.append(getColorId());
		sb.append(", colorName=");
		sb.append(getColorName());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.colors.themes.model.Colors");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>colorId</column-name><column-value><![CDATA[");
		sb.append(getColorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>colorName</column-name><column-value><![CDATA[");
		sb.append(getColorName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Colors.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Colors.class };
	private long _colorId;
	private long _originalColorId;
	private boolean _setOriginalColorId;
	private String _colorName;
	private String _originalColorName;
	private boolean _status;
	private boolean _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private Colors _escapedModel;
}